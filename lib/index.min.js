"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.dispatch=dispatch,exports.connect=connect;var _fluxibleJs=require("fluxible-js"),_react=_interopRequireDefault(require("react")),_redefineStaticsJs=_interopRequireDefault(require("redefine-statics-js"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}/**
 *
 * @param {Function} callback function that would be called sa the mutation handler.
 * @param  {...any} payload to the callback function
 */function dispatch(a){for(var b=arguments.length,c=Array(1<b?b-1:0),d=1;d<b;d++)c[d-1]=arguments[d];return a.apply(void 0,[{getStore:_fluxibleJs.getStore,updateStore:function c(a,b){(0,_fluxibleJs.updateStore)(a),b&&b()}}].concat(c))}/**
 * @param {Function} Would receive the current store's state as the only argument. Should return an object of the states that you want to be accessible in the connected component.
 * @param {Object} You should define your action handlers here. Each methods would be called with an object (that has `updateStore` and `getStore` methods) as the first argument. The rest would be the arguments you passed to the call.
 * @return {Object} the inferno component.
 */function connect(a,b){return function(c){function d(b){var d=this;return this.props=b,a&&(this.removeListener=(0,_fluxibleJs.addObserver)(function(){d.setState({count:d.state.count+1})},Object.keys(a((0,_fluxibleJs.getStore)()))),this.state={count:0}),this.componentWillUnmount=function(){d.removeListener&&d.removeListener()},this.render=function(){return a&&e?_react.default.createElement(c,_extends({},d.props,e,a((0,_fluxibleJs.getStore)()))):a?_react.default.createElement(c,_extends({},d.props,a((0,_fluxibleJs.getStore)()))):_react.default.createElement(c,_extends({},d.props,e))},this}// we only want to compute mutations once
var e;return b&&(e={},Object.keys(b).forEach(function(a){e[a]=function(){for(var c=arguments.length,d=Array(c),e=0;e<c;e++)d[e]=arguments[e];return dispatch.apply(void 0,[b[a]].concat(d))}})),d.prototype=_react.default.Component.prototype,d.prototype.constructor=d,(0,_redefineStaticsJs.default)(d,c),d}}